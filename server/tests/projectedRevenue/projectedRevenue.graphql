fragment ProjectedRevenueFields on ProjectedRevenue {
  id
  clubId
  name
  amount
  date
}

fragment ProjectedRevenue on ProjectedRevenue {
  ...ProjectedRevenueFields
  club {
    ...ClubApplicationInfoFields
  }
}

query findUniqueProjectedRevenue($where: ProjectedRevenueWhereUniqueInput!) {
  findUniqueProjectedRevenue(where: $where) {
    ...ProjectedRevenue
  }
}

query findManyProjectedRevenue(
  $where: ProjectedRevenueWhereInput
  $orderBy: [ProjectedRevenueOrderByWithRelationInput!]
  $cursor: ProjectedRevenueWhereUniqueInput
  $skip: Int
  $take: Int
) {
  findManyProjectedRevenue(where: $where, orderBy: $orderBy, cursor: $cursor, skip: $skip, take: $take) {
    ...ProjectedRevenue
  }
}

query findManyProjectedRevenueCount(
  $where: ProjectedRevenueWhereInput
  $orderBy: [ProjectedRevenueOrderByWithRelationInput!]
  $cursor: ProjectedRevenueWhereUniqueInput
  $skip: Int
  $take: Int
) {
  findManyProjectedRevenueCount(where: $where, orderBy: $orderBy, cursor: $cursor, skip: $skip, take: $take)
}

mutation createOneProjectedRevenue($data: ProjectedRevenueCreateInput!) {
  createOneProjectedRevenue(data: $data) {
    ...ProjectedRevenue
  }
}

mutation updateOneProjectedRevenue($where: ProjectedRevenueWhereUniqueInput!, $data: ProjectedRevenueUpdateInput!) {
  updateOneProjectedRevenue(where: $where, data: $data) {
    ...ProjectedRevenue
  }
}

mutation deleteOneProjectedRevenue($where: ProjectedRevenueWhereUniqueInput!) {
  deleteOneProjectedRevenue(where: $where) {
    ...ProjectedRevenue
  }
}

mutation deleteManyProjectedRevenue($where: ProjectedRevenueWhereInput) {
  deleteManyProjectedRevenue(where: $where) {
    count
  }
}

mutation updateManyProjectedRevenue(
  $where: ProjectedRevenueWhereInput
  $data: ProjectedRevenueUpdateManyMutationInput!
) {
  updateManyProjectedRevenue(where: $where, data: $data) {
    count
  }
}
