datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
  // url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Club {
  id              Int                  @id @default(autoincrement())
  name            String?              @unique
  slug            String?              @unique
  description     String?
  email           String?
  meetingDate     String?
  location        String?
  approval        Boolean?             @default(false)
  status          String?              @default("DRAFT") //alternate values REVIEW / APPROVED
  availability    String?              @default("OPEN") //alternate value CLOSED
  links           Link[]
  applicationInfo ClubApplicationInfo?
  tags            Tag[]
  members         User[]               @relation("members")
  editors         User[]               @relation("editors")
  roles           Role[]
  invites         Invite[]
}

model Link {
  id     Int    @id @default(autoincrement())
  club   Club   @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId Int
  name   String
  link   String
  type   String //can take values like WEBSITE / DISCORD / INSTAGRAM / SNAPCHAT
}

model ClubApplicationInfo {
  id                                  Int                 @id @default(autoincrement())
  teacher                             User?               @relation(fields: [userId], references: [id])
  userId                              Int?
  club                                Club?               @relation(fields: [clubId], references: [id])
  clubId                              Int?                @unique
  projectedRevenue                    ProjectedRevenue[]
  projectedExpenses                   ProjectedExpenses[]
  purpose                             String?
  membershipRequirements              String?
  dutiesOfMembers                     String?
  titlesAndDutiesOfOfficers           String?
  selectionOfOfficers                 String?
  officerMinimumGPA                   Float?
  percentAttendanceForOfficialMeeting Int?
  percentAttendanceToApproveDecision  Int?
}

model Tag {
  id              Int    @id @default(autoincrement())
  name            String @unique
  clubs           Club[]
  interestedUsers User[]
}

model User {
  id            Int                   @id @default(autoincrement())
  ccid          String                @unique
  studentId     String?               @unique
  firstname     String
  lastname      String
  email         String                @unique
  emailVerified Boolean               @default(false)
  active        Boolean               @default(false)
  password      String
  grade         String //values: FRESHMAN, SOPHMORE, JUNIOR, SENIOR TEACHER
  type          String                @default("STUDENT") //alternative value: TEACHER
  interests     Tag[]
  clubs         Club[]                @relation("members")
  canEdit       Club[]                @relation("editors")
  advisor       ClubApplicationInfo[]
  roles         Role[]
  invites       Invite[]
}

model Invite {
  id     Int    @id @default(autoincrement())
  status String @default("PENDING") //alternate values: ACCEPTED, DECLINED
  club   Club   @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId Int
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  Role   Role   @relation(fields: [roleId], references: [id])
  roleId Int
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String
  color       String
  description String
  users       User[]
  club        Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId      Int
  type        String   @default("MEMBER") //alternate value: LEADER
  invites     Invite[]
}

model ProjectedRevenue {
  id     Int                  @id @default(autoincrement())
  club   ClubApplicationInfo? @relation(fields: [clubId], references: [id])
  clubId Int?
  name   String?
  amount Float?
  date   String?
}

model ProjectedExpenses {
  id     Int                  @id @default(autoincrement())
  club   ClubApplicationInfo? @relation(fields: [clubId], references: [id])
  clubId Int?
  name   String?
  amount Float?
  date   String?
}
