generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_POSTGRES_URL")
  // url      = env("DATABASE_URL")
}

model Club {
  id              String               @id @default(cuid())
  name            String?              @unique
  slug            String?              @unique
  description     String?
  email           String?
  meetingDate     String?
  location        String?
  approval        Boolean?             @default(false)
  status          ClubStatus           @default(DRAFT)
  availability    ClubAvailability     @default(OPEN)
  teacherId       String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  teacher         User?                @relation("advisor", fields: [teacherId], references: [id])
  applicationInfo ClubApplicationInfo?
  invites         Invite[]
  links           Link[]
  roles           Role[]
  tags            Tag[]
  editors         User[]               @relation("editors")
  members         User[]               @relation("members")
}

model Link {
  id        String   @id @default(cuid())
  clubId    String
  name      String
  link      String
  type      LinkType @default(WEBSITE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
}

model ClubApplicationInfo {
  id                                  String              @id @default(cuid())
  clubId                              String?             @unique
  purpose                             String?
  membershipRequirements              String?
  dutiesOfMembers                     String?
  titlesAndDutiesOfOfficers           String?
  selectionOfOfficers                 String?
  officerMinimumGPA                   Float?
  percentAttendanceForOfficialMeeting Int?
  percentAttendanceToApproveDecision  Int?
  createdAt                           DateTime            @default(now())
  updatedAt                           DateTime            @updatedAt
  club                                Club?               @relation(fields: [clubId], references: [id])
  projectedExpenses                   ProjectedExpenses[]
  projectedRevenue                    ProjectedRevenue[]
}

model Tag {
  id              String   @id @default(cuid())
  name            String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  clubs           Club[]
  interestedUsers User[]
}

model User {
  id                String      @id @default(cuid())
  ccid              String      @unique
  studentId         String      @unique
  firstname         String
  lastname          String
  email             String      @unique
  emailVerified     Boolean     @default(true)
  verificationToken String?     @unique // should be moved to a separate table
  active            Boolean     @default(false)
  password          String
  grade             Grade
  type              AccountType @default(STUDENT)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  advisor           Club[]      @relation("advisor")
  invites           Invite[]
  roles             Role[]
  interests         Tag[]
  canEdit           Club[]      @relation("editors")
  clubs             Club[]      @relation("members")
}

model Invite {
  id        String       @id @default(cuid())
  status    InviteStatus @default(PENDING)
  type      InviteType   @default(INCOMING)
  clubId    String
  userId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  club      Club         @relation(fields: [clubId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  roles     Role[]
}

model Role {
  id          String   @id @default(cuid())
  name        String
  color       String
  description String
  clubId      String
  type        RoleType @default(MEMBER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  club        Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  invites     Invite[]
  users       User[]
}

model ProjectedRevenue {
  id        String               @id @default(cuid())
  clubId    String?
  name      String?
  amount    Float?
  date      String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  club      ClubApplicationInfo? @relation(fields: [clubId], references: [id])
}

model ProjectedExpenses {
  id        String               @id @default(cuid())
  clubId    String?
  name      String?
  amount    Float?
  date      String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  club      ClubApplicationInfo? @relation(fields: [clubId], references: [id])
}

enum Grade {
  FRESHMAN
  SOPHMORE
  JUNIOR
  SENIOR
  TEACHER
}

enum RoleType {
  MEMBER
  LEADER
}

enum InviteStatus {
  PENDING
  DECLINED
  ACCEPTED
}

enum InviteType {
  OUTGOING
  INCOMING
}

enum ClubAvailability {
  OPEN
  INVITE_ONLY
  CLOSED
}

enum AccountType {
  STUDENT
  TEACHER
  ASB
  ADMIN
}

enum ClubStatus {
  DRAFT
  REVIEW
  APPROVED
  DECLINED
}

enum LinkType {
  EMAIL
  TWITTER
  INSTAGRAM
  DISCORD
  YOUTUBE
  FACEBOOK
  REMIND
  SNAPCHAT
  WEBSITE
}
