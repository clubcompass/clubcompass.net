datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url = env("LOCAL_POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Club {
  id              String               @id @default(cuid())
  name            String?              @unique
  slug            String?              @unique
  description     String?
  email           String?
  meetingDate     String?
  location        String?
  approval        Boolean?             @default(false)
  status          ClubStatus           @default(DRAFT)
  availability    ClubAvailability     @default(OPEN)
  links           Link[]
  applicationInfo ClubApplicationInfo?
  tags            Tag[]
  members         User[]               @relation("members")
  editors         User[]               @relation("editors")
  roles           Role[]
  invites         Invite[]
  teacher         User?                @relation("advisor", fields: [teacherId], references: [id])
  teacherId       String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
}

model Link {
  id        String   @id @default(cuid())
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId    String
  name      String
  link      String
  type      LinkType @default(WEBSITE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClubApplicationInfo {
  id                                  String              @id @default(cuid())
  club                                Club?               @relation(fields: [clubId], references: [id])
  clubId                              String?             @unique
  projectedRevenue                    ProjectedRevenue[]
  projectedExpenses                   ProjectedExpenses[]
  purpose                             String?
  membershipRequirements              String?
  dutiesOfMembers                     String?
  titlesAndDutiesOfOfficers           String?
  selectionOfOfficers                 String?
  officerMinimumGPA                   Float?
  percentAttendanceForOfficialMeeting Int?
  percentAttendanceToApproveDecision  Int?
  createdAt                           DateTime            @default(now())
  updatedAt                           DateTime            @updatedAt
}

model Tag {
  id              String   @id @default(cuid())
  name            String   @unique
  clubs           Club[]
  interestedUsers User[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model User {
  id            String      @id @default(cuid())
  ccid          String      @unique
  studentId     String      @unique
  firstname     String
  lastname      String
  email         String      @unique
  emailVerified Boolean     @default(false)
  active        Boolean     @default(false)
  password      String
  grade         Grade
  type          AccountType @default(STUDENT)
  interests     Tag[]
  clubs         Club[]      @relation("members")
  canEdit       Club[]      @relation("editors")
  advisor       Club[]      @relation("advisor")
  roles         Role[]
  invites       Invite[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Invite {
  id        String       @id @default(cuid())
  status    InviteStatus @default(PENDING)
  club      Club         @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId    String
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  roles      Role[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Role {
  id          String   @id @default(cuid())
  name        String
  color       String
  description String
  users       User[]
  club        Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId      String
  type        RoleType @default(MEMBER)
  invites     Invite[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProjectedRevenue {
  id        String               @id @default(cuid())
  club      ClubApplicationInfo? @relation(fields: [clubId], references: [id])
  clubId    String?
  name      String?
  amount    Float?
  date      String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model ProjectedExpenses {
  id        String               @id @default(cuid())
  club      ClubApplicationInfo? @relation(fields: [clubId], references: [id])
  clubId    String?
  name      String?
  amount    Float?
  date      String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

enum Grade {
  FRESHMAN
  SOPHMORE
  JUNIOR
  SENIOR
  TEACHER
}

enum RoleType {
  MEMBER
  LEADER
}

enum InviteStatus {
  PENDING
  DECLINED
  ACCEPTED
}

enum ClubAvailability {
  OPEN
  INVITE_ONLY
  CLOSED
}

enum AccountType {
  STUDENT
  TEACHER
  ASB
  ADMIN
}

enum ClubStatus {
  DRAFT
  REVIEW
  APPROVED
}

enum LinkType {
  EMAIL
  TWITTER
  INSTAGRAM
  DISCORD
  YOUTUBE
  FACEBOOK
  REMIND
  SNAPCHAT
  WEBSITE
}
